# -*- coding: utf-8 -*-
"""Assignment_1_Pytorch_MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9KpbQyFU4zfq8zLLns8a2Kd8PRMGsaZ

Overall structure:

1) Set Pytorch metada
- seed
- tensorflow output
- whether to transfer to gpu (cuda)

2) Import data
- download data
- create data loaders with batchsie, transforms, scaling

3) Define Model architecture, loss and optimizer

4) Define Test and Training loop
    - Train:
        a. get next batch
        b. forward pass through model
        c. calculate loss
        d. backward pass from loss (calculates the gradient for each parameter)
        e. optimizer: performs weight updates

5) Perform Training over multiple epochs:
    Each epoch:
    - call train loop
    - call test loop

Acknowledgments:https://github.com/motokimura/pytorch_tensorboard/blob/master/main.py
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import random_split
from torchvision import datasets, transforms

from torch.utils.tensorboard import SummaryWriter
from datetime import datetime
import os
import gc
from pathlib import Path
import matplotlib.pyplot as plt

batch_size = 64
test_batch_size = 1000
validate_batch_size = 1100
epochs = 10
lr = 0.01
try_cuda = True
seed = 1000
logging_interval = 10 # how many batches to wait before logging
logging_dir = None

# Setting up the logging
writer = SummaryWriter(str(logging_dir))
if logging_dir is None:
    logging_dir = os.path.join('results', datetime.now().strftime('%b%d_%H-%M-%S'))
writer = SummaryWriter(str(logging_dir))

# Deciding whether to send to the cpu or not if available
if torch.cuda.is_available() and try_cuda:
    cuda = True
    torch.cuda.manual_seed(seed)
else:
    cuda = False
    torch.manual_seed(seed)

# Setting up data
transform=transforms.Compose([
            transforms.ToTensor(),
            transforms.Normalize((0.01307,), (0.3081,))
])

train_dataset = datasets.MNIST('../data', train=True, download=True, transform=transform)
train_size = int(0.8 * len(train_dataset))
valid_size = len(train_dataset) - train_size
train_subset, valid_subset = torch.utils.data.random_split(train_dataset, [train_size, valid_size])

train_loader = torch.utils.data.DataLoader(train_subset, batch_size=batch_size, shuffle=True)
test_loader = torch.utils.data.DataLoader(train_subset, batch_size=test_batch_size, shuffle=False)
valid_loader = torch.utils.data.DataLoader(valid_subset, batch_size=validate_batch_size, shuffle=False)

# Monitor statistics
def log_statistics(writer, tag, values, n_iter):
    writer.add_scalar(f'{tag}/mean', torch.mean(values).item(), n_iter)
    writer.add_scalar(f'{tag}/min', torch.min(values).item(), n_iter)
    writer.add_scalar(f'{tag}/max', torch.max(values).item(), n_iter)
    writer.add_scalar(f'{tag}/std', torch.std(values).item(), n_iter)

# Defining Architecture,loss and optimizer
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 10, kernel_size=5)
        self.conv2 = nn.Conv2d(10, 20, kernel_size=5)
        self.fc1 = nn.Linear(320, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        # Layer 1
        net_input1 = x.clone()
        x = self.conv1(net_input1)
        after_conv1 = x.clone()
        x = F.relu(x)
        relu1 = x.clone()
        x = F.max_pool2d(x, 2)
        maxpool1 = x.clone()

        # Layer 2
        net_input2 = x.clone()
        x = self.conv2(net_input2)
        after_conv2 = x.clone()
        x = F.relu(x)
        relu2 = x.clone()
        x = F.max_pool2d(x, 2)
        maxpool2 = x.clone()

        # FC Layers
        x = x.view(-1, 320)
        x = F.relu(self.fc1(x))
        relu_fc1 = x.clone()
        x = F.dropout(x, p=0.5, training=self.training)
        x = self.fc2(x)

        output = F.softmax(x, dim=1)
        return output


model = Net()
if cuda:
    model.cuda()

optimizer = optim.Adam(model.parameters(), lr=lr)

# Defining the test and training loops
def calculate_accuracy(output, target):
    pred = torch.argmax(output, 1)
    correct = pred.eq(target.view_as(pred)).sum().item()
    return correct / target.shape[0]

def train(epoch):
    model.train()
    running_loss = 0
    running_accuracy = 0
    criterion = nn.CrossEntropyLoss()
    for batch_idx, (data, target) in enumerate(train_loader):
        if cuda:
            data, target = data.cuda(), target.cuda()

        optimizer.zero_grad()
        output = model(data) # forward
        loss = criterion(output, target)

        loss.backward()  # backward
        optimizer.step()
        running_loss += loss.item()
        running_accuracy += calculate_accuracy(output, target)
        if batch_idx % logging_interval == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(train_loader.dataset),
                       100. * batch_idx / len(train_loader), loss.item())
            )
            n_iter = (epoch - 1) * len(train_loader) + batch_idx + 1
            writer.add_scalar('train/loss', loss.item(), n_iter)

    # Log model parameters to TensorBoard at every epoch
    for name, param in model.named_parameters():
        layer, attr = os.path.splitext(name)
        attr = attr[1:]
        writer.add_histogram('{}/{}'.format(layer, attr), param.clone().cpu().data.numpy())
    train_loss = running_loss / len(train_loader)
    train_accuracy = running_accuracy / len(train_loader)
    return train_loss, train_accuracy

def test(epoch):
    model.eval()
    running_loss = 0
    running_accuracy = 0
    criterion = nn.CrossEntropyLoss()
    for data, target in test_loader:
        if cuda:
            data, target = data.cuda(), target.cuda()

        output = model(data)
        loss = criterion(output, target)
        running_loss += loss.item()
        running_accuracy += calculate_accuracy(output, target)

    test_loss = running_loss / len(test_loader)
    test_accuracy = running_accuracy / len(test_loader)


    n_iter = epoch * len(test_loader)
    writer.add_scalar('test/loss', test_loss, n_iter)
    writer.add_scalar('test/accuracy', test_accuracy, n_iter)
    return test_loss, test_accuracy

def plot():
    train_losses, train_accuracies = [], []
    test_losses, test_accuracies = [], []
    for epoch in range(1, epochs + 1):
        print(f"Model is using {'cuda' if cuda else 'cpu'}")
        train_loss, train_accuracy = train(epoch)
        train_losses.append(train_loss)
        train_accuracies.append(train_accuracy)

        test_loss, test_accuracy = test(epoch)
        test_losses.append(test_loss)
        test_accuracies.append(test_accuracy)
        print(f"Training: LOSS: {train_loss} | ACCURACY: {train_accuracy}\n")
        print(f"Test: LOSS: {test_loss} | ACCURACY: {test_accuracy}\n")

        # CLEANUP
        gc.collect()
        torch.cuda.empty_cache()


    # Create a subplot of 1 row and 2 columns
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))

    # Plotting the losses on the first subplot
    ax1.plot(train_losses, color='red', label='Train Loss')
    ax1.plot(test_losses, color='orange', label='Test Loss')
    ax1.set_title('Training and Test Losses')
    ax1.set_xlabel('Epochs')
    ax1.set_ylabel('Loss')
    ax1.legend()
    ax1.grid(True)

    # Plotting the accuracies on the second subplot
    ax2.plot(train_accuracies, color='green', label='Train Accuracy')
    ax2.plot(test_accuracies, color='blue', label='Test Accuracy')
    ax2.set_title('Training and Test Accuracies')
    ax2.set_xlabel('Epochs')
    ax2.set_ylabel('Accuracy')
    ax2.legend()
    ax2.grid(True)

    # Display the plots
    plt.tight_layout()
    plt.show()

plot()

writer.close()

# Commented out IPython magic to ensure Python compatibility.
"""
#https://stackoverflow.com/questions/55970686/tensorboard-not-found-as-magic-function-in-jupyter

#seems to be working in firefox when not working in Google Chrome when running in Colab
#https://stackoverflow.com/questions/64218755/getting-error-403-in-google-colab-with-tensorboard-with-firefox


# %load_ext tensorboard[dir]
# %tensorboard --logdir [dir]

"""

